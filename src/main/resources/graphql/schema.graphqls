scalar Date
scalar UUID

# Query

type Author {
    id: ID!
    name: String!
    books: [Book]
}

type Book {
    id: ID!
    title: String!
    publisher: String
    #    author: Author!
}

type Person {
    id: ID!
    firstname: String!
    lastname: String!
    dateOfBirth: Date!
    alive: Boolean!
    address: [Address]
}

type Customer {
    id: ID!
    title: String
    customerNumber: String!
    firstName: String!
    lastName: String!
    birthDate: Date
    gender: String!
}

type Address {
    id: ID!
    street: String!
    additional: String
    number: String
    zipcode: String!
    city: String!
    state: String
    country: String!
    addressType: String!
}

"Query Root"
type Query{
    customers: [Customer]
    authors: [Author]
    authorById(id: ID!): Author
    getAllPersons: [Person!]!
    getPersonById(id: ID!): Person
    "List all addresses"
    allAddresses: [Address]
    addressById(id: ID!): Address
}


# Mutation
input CustomerInput {
    id: ID
    customerNumber: String
    title: String
    firstName: String!
    lastName: String!
    birthDate: Date
    gender: String!
}

input AddressInput {
    id: ID
    street: String!
    additional: String
    number: String
    zipcode: String!
    city: String!
    state: String
    country: String!
    addressType: String!
}

"Mutation Root"
type Mutation {
    createCustomer(customer: CustomerInput!): Customer
    createPerson(firstname: String!, dateOfBirth: Date!, alive: Boolean!): Person!
    updatePerson(id: ID!, firstname: String!, dateOfBirth: Date!, alive: Boolean!): Person!
    createAddress(address: AddressInput!): Address
    #    createAddress(address: AddressInput!): Address
    updateAddress(id: ID!, street: String!,additional: String,number: String,zipcode: String!,city: String!,state: String,country: String!, addressType: String!): Address
}