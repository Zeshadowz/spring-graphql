scalar Date
scalar UUID

type Query{
    authors: [Author]
    authorById(id: ID!): Author
    getAllPersons: [Person!]!
    getPersonById(id: ID!): Person
    allAddresses: [Address]
    addressById(id: ID!): Address
}

type Mutation {
    createPerson(firstname: String!, dateOfBirth: Date!, alive: Boolean!): Person!
    updatePerson(id: ID!, firstname: String!, dateOfBirth: Date!, alive: Boolean!): Person!
    createAddress(street: String!, additional: String, number: String!, zipcode: String!, city: String!, state: String, country: String!, addressType: String!): Address
    #    createAddress(address: AddressInput!): Address
    updateAddress(id: ID!, street: String!,additional: String,number: String,zipcode: String!,city: String!,state: String,country: String!, addressType: String!): Address
}

type Author {
    id: ID!
    name: String!
    books: [Book]
}

type Book {
    id: ID!
    title: String!
    publisher: String
    #    author: Author!
}

type Person {
    id: ID!
    firstname: String!
    lastname: String!
    dateOfBirth: Date!
    alive: Boolean!
    address: [Address]
}

type Address {
    id: ID!
    street: String!
    additional: String
    number: String
    zipcode: String!
    city: String!
    state: String
    country: String!
    addressType: String!
}

input AddressInput {
    id: ID!
    street: String!
    additional: String
    number: String
    zipcode: String!
    city: String!
    state: String
    country: String!
    addressType: String!
}